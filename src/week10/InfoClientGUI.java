/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package week10;

import java.io.*;
import java.net.*;
import javax.swing.ButtonModel;

/**
 *
 * @author spong
 */
public class InfoClientGUI extends javax.swing.JFrame {

    private final int INFO_PORT = 50000;
    private final String TargetHost = "localhost";
    private Socket clientSocket;
    private DataOutputStream outToServer;
    private BufferedReader inFromServer;
    
    public InfoClientGUI() {
        initComponents();
        try {
            clientSocket = new Socket(TargetHost, INFO_PORT);
            outToServer = new DataOutputStream(clientSocket.getOutputStream());
            inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            System.out.println(inFromServer.readLine());
            System.out.println(inFromServer.readLine());
            System.out.println(inFromServer.readLine());
            System.out.println("");
        } catch (IOException ioe) {
            System.out.println("Error:" + ioe);
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
    
    public void kirimServer(){
        try {
            String cmd = cekButton();
            if (cmd.equals("IPF")) {
                cmd += " " + IPfield.getText();
                outToServer.writeBytes(cmd + "\n");
            } else {
                outToServer.writeBytes(cmd + "\n");
            }
            String result = inFromServer.readLine();
            outputArea.append("Dari Server: " + result + "\n");
            if (cmd.equals("QUIT")) {
                outToServer.close();
                inFromServer.close();
                clientSocket.close();
                System.exit(0);
            }
        } catch (IOException ioe) {
            System.out.println("Error:" + ioe);
        } catch (Exception e) {
            System.out.println("Error:" + e);
        }
    }
    
    public String cekButton(){
        ButtonModel clientModel = clientGroup.getSelection();
        if (clientModel != null) {
            return clientModel.getActionCommand();
        } else {
            return "Gubai :D";
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clientGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        timeBtn = new javax.swing.JRadioButton();
        netBtn = new javax.swing.JRadioButton();
        ipfBtn = new javax.swing.JRadioButton();
        sctBtn = new javax.swing.JRadioButton();
        quitBtn = new javax.swing.JRadioButton();
        kirimBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        IPfield = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Info Client");

        clientGroup.add(timeBtn);
        timeBtn.setText("TIME");

        clientGroup.add(netBtn);
        netBtn.setText("NET");

        clientGroup.add(ipfBtn);
        ipfBtn.setText("IPF");

        clientGroup.add(sctBtn);
        sctBtn.setText("SCT");

        clientGroup.add(quitBtn);
        quitBtn.setText("QUIT");

        kirimBtn.setText("Kirim");
        kirimBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kirimBtnActionPerformed(evt);
            }
        });

        outputArea.setColumns(20);
        outputArea.setRows(5);
        jScrollPane1.setViewportView(outputArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(173, 173, 173)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(timeBtn)
                                            .addComponent(netBtn))
                                        .addGap(39, 39, 39)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sctBtn)
                                            .addComponent(ipfBtn)))
                                    .addComponent(kirimBtn)
                                    .addComponent(IPfield, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(67, 67, 67)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(56, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(quitBtn)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeBtn)
                            .addComponent(ipfBtn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(netBtn)
                            .addComponent(sctBtn))
                        .addGap(18, 18, 18)
                        .addComponent(quitBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(IPfield, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(kirimBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        timeBtn.setActionCommand("TIME");
        netBtn.setActionCommand("NET");
        ipfBtn.setActionCommand("IPF");
        sctBtn.setActionCommand("SCT");
        quitBtn.setActionCommand("QUIT");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void kirimBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kirimBtnActionPerformed
        kirimServer();
    }//GEN-LAST:event_kirimBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InfoClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InfoClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InfoClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InfoClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InfoClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IPfield;
    private javax.swing.ButtonGroup clientGroup;
    private javax.swing.JRadioButton ipfBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton kirimBtn;
    private javax.swing.JRadioButton netBtn;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JRadioButton quitBtn;
    private javax.swing.JRadioButton sctBtn;
    private javax.swing.JRadioButton timeBtn;
    // End of variables declaration//GEN-END:variables
}
